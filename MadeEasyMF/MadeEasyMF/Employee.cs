using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DatabaseLibrary;
using System.Data.SqlClient;
using System.IO;

namespace SoftlightMF
{
    public partial class Employee : Form
    {
        private DatabaseLib db;
        private DataTable tb;
        string employeeID, departmentID, firstName, middleName, lastName,
            address, phone, gender, empCode, imgLoc;
        byte[] img;
        private string sub;
        private int branchCode;
        public Employee()
        {
            InitializeComponent();
            db = new DatabaseLib();
            getDepartment();
            txtEmployeeID.Text = autoGenerateEmpID();
            employeeID = txtEmployeeID.Text;
            getEmpName();
            radRegister.Checked = true;
        }
        private void getDepartment()
        {
            db.connect();
            db.getDepartment();
            db.getConnection.Close();
            DataTable tbDepartment = new DataTable();
            db.getDataAdapter.Fill(tbDepartment);
            foreach (DataRow dr in tbDepartment.Rows)
            {
                comboDepartment.Items.Add(dr["DepartmentName"].ToString());
            }
        }
        private string departmentName(string depID)
        {
            db.connect();
            db.getDepartmentName(depID);
            db.getConnection.Close();
            DataTable tbDepName = new DataTable();
            db.getDataAdapter.Fill(tbDepName);
            string departmentName = tbDepName.Rows[0]["DepartmentName"].ToString();
            return departmentName;
        }
        private string autoGenerateEmpID()
        {
            string second, minute, hour, day, month, autoID;
            second = DateTime.Now.Second.ToString();
            minute = DateTime.Now.Minute.ToString();
            hour = DateTime.Now.Hour.ToString();
            day = DateTime.Now.Day.ToString();
            month = DateTime.Now.Month.ToString();
            autoID = "EMP" + hour + day + minute + second + month;
            return autoID;
        }
        private string getGender()
        {
            if (radMale.Checked == true)
            {
                gender = radMale.Text;
            }
            else
            {
                gender = radFemale.Text;
            }
            return gender;
        }
        private string getDepartmentID()
        {
            string departmentID = null;
            db.connect();
            db.getDepartment(comboDepartment.SelectedItem.ToString());
            db.getConnection.Close();
            DataTable tb = new DataTable();
            db.getDataAdapter.Fill(tb);
            string dbDepartmentID = tb.Rows[0]["DepartmentID"].ToString();

            departmentID = dbDepartmentID;

            return departmentID;
        }
        private void getBranchName()
        {
            db.connect();
            db.getAutoGenerateDetails();
            db.getConnection.Close();
            DataTable tb = new DataTable();
            db.getDataAdapter.Fill(tb);
            foreach (DataRow dr in tb.Rows)
            {
                comboBranchName.Items.Add(dr["BranchName"].ToString());
            }
        }//Vault implementation
        private string branchName(int branchCode)
        {
            string  branchName = null;
            db.connect();
            db.branchName(branchCode);
            db.getConnection.Close();
            DataTable tb = new DataTable();
            db.getDataAdapter.Fill(tb);
            branchName = tb.Rows[0]["BranchName"].ToString();

            return branchName;
        }
        private int getBranchCode(string branchName)
        {
            int branchCode = 0;
            db.connect();
            db.getBranchDetails(branchName);
            db.getConnection.Close();
            DataTable tb = new DataTable();
            db.getDataAdapter.Fill(tb);
            branchCode = (int)tb.Rows[0]["BranchCode"];

            return branchCode;
        }
        private void registerEmployee()
        {
            try
            {
                departmentID = getDepartmentID();
                firstName = txtFirstName.Text;
                middleName = txtMiddleName.Text;
                lastName = txtLastName.Text;
                address = txtAddress.Text;
                phone = txtPhone.Text;
                gender = getGender();
                branchCode = getBranchCode(comboBranchName.SelectedItem.ToString());
                empCode = "";
                db.connect();
                db.empDetails(employeeID, departmentID, firstName, middleName, lastName, 
                    address, phone, gender, empCode, branchCode);
                db.getConnection.Close();
                tb = new DataTable();
                db.getDataAdapter.Fill(tb);
                insertPassport();

                MessageBox.Show("Employee registered successfully\nThe employee ID is " + employeeID, "Info", MessageBoxButtons.OK, MessageBoxIcon.Information);
                new Employee().Show();
                Hide();
            }
            catch (FormatException fe)
            {
                txtPhone.Focus();
                errorProvider.SetError(txtPhone, "Please enter number only.");
            }
            catch (SqlException e)
            {
                MessageBox.Show(e.Message);
            }
        }
        private void getEmployee()
        {
            try
            {
                string empID = txtEmpID.Text;
                db.connect();
                db.getEmployeeDetails(empID);
                db.getConnection.Close();
                tb = new DataTable();
                db.getDataAdapter.Fill(tb);
                string dbEmpID = tb.Rows[0]["EmployeeID"].ToString();
                string dbDepID = tb.Rows[0]["DepartmentID"].ToString();
                firstName = tb.Rows[0]["FirstName"].ToString();
                middleName = tb.Rows[0]["MiddleName"].ToString();
                lastName = tb.Rows[0]["LastName"].ToString();
                address = tb.Rows[0]["Address"].ToString();
                phone = tb.Rows[0]["PhoneNumber"].ToString();
                gender = tb.Rows[0]["Gender"].ToString();
                branchCode = (int)tb.Rows[0]["BranchCode"];

                if (empID == dbEmpID)
                {
                    EmpTabDetails.Visible = true;
                    PhoneTab.Visible = true;
                    groupGender.Visible = true;
                    btnReg.Visible = true;
                    btnDepClear.Visible = true;
                    panPassport.Visible = true;
                    btnPassport.Visible = true;
                    sSMessage.Visible = false;
                    lblEmpID.Visible = false;
                    txtEmployeeID.Visible = false;

                    txtFirstName.Text = firstName;
                    txtMiddleName.Text = middleName;
                    txtLastName.Text = lastName;
                    txtAddress.Text = address;
                    txtPhone.Text = phone;
                    comboDepartment.Text = departmentName(dbDepID);
                    comboBranchName.Text = branchName(branchCode);
                    retrievePhoto(empID);
                    if (gender.Equals("Male"))
                    {
                        radMale.Checked = true;
                    }
                    else
                    {
                        radFemale.Checked = true;
                    }
                }
            }
            catch (IndexOutOfRangeException ex)
            {
                EmpTabDetails.Visible = false;
                PhoneTab.Visible = false;
                groupGender.Visible = false;
                btnReg.Visible = false;
                btnDepClear.Visible = false;
                sSMessage.Visible = true;
                panPassport.Visible = false;
                tSSMessage.Text = "Sorry! Employee Id does not exist.";
            }
            catch (SqlException e)
            {
                MessageBox.Show(e.Message);
            }
        }
        private void updateEmployee()
        {
            try
            {
                if (radMale.Checked == true)
                {
                    gender = "Male";
                }
                else
                {
                    gender = "Female";
                }
                branchCode = getBranchCode(comboBranchName.SelectedItem.ToString());
                db.connect();
                db.updateEmployeeDetails(txtEmpID.Text, getDepartmentID(), txtFirstName.Text, txtMiddleName.Text,
                    txtLastName.Text, txtAddress.Text, txtPhone.Text, gender, branchCode);
                db.getConnection.Close();
                DataTable tbUdateEmp = new DataTable();
                db.getDataAdapter.Fill(tbUdateEmp);
                updatePhoto(txtEmpID.Text);
                MessageBox.Show("Employee details updated successfully");
                new Employee().Show();
                Hide();
            }
            catch (SqlException sql)
            {
                MessageBox.Show(sql.Message, "Error");
            }
        }
        private void deleteEmployee()
        {
            try
            {
                db.connect();
                db.deleteEmployee(txtEmpID.Text);
                db.getConnection.Close();
                DataTable tbdeleteEmp = new DataTable();
                db.getDataAdapter.Fill(tbdeleteEmp);
                MessageBox.Show("Employee deleted successfully");
                txtEmployeeID.Text = autoGenerateEmpID();
                txtEmpID.Text = "";
                txtFirstName.Text = "";
                txtMiddleName.Text = "";
                txtLastName.Text = "";
                txtAddress.Text = "";
                txtPhone.Text = "";
                gender = "";
                picUploadEmployee.Image = null;
            }
            catch (SqlException sql)
            {
                MessageBox.Show(sql.Message, "Error");
            }
            catch(NullReferenceException nre)
            {

            }
        }
        private int validateEmployee()
        {
            int flag = 0;
            if (txtFirstName.Text == "")
            {
                txtFirstName.Focus();
                errorProvider.SetError(txtFirstName, "Please, enter the first name!");
                flag = 1;
            }
            if (txtLastName.Text == "")
            {
                txtLastName.Focus();
                errorProvider.SetError(txtLastName, "Please, enter the last name!");
                flag = 1;
            }
            if (txtAddress.Text == "")
            {
                txtAddress.Focus();
                errorProvider.SetError(txtAddress, "Please, enter the address!");
                flag = 1;
            }
            else
            {
                txtAddress.Focus();
                errorProvider.Clear();
            }
            if (txtPhone.Text == "")
            {
                txtPhone.Focus();
                errorProvider.SetError(txtPhone, "Please, enter your phone number!");
                flag = 1;
            }
            if (txtPhone.Text.Length != 10)
            {
                txtPhone.Focus();
                errorProvider.SetError(txtPhone, "Phone number must be 10 digits, please ommit the first digit!");
                flag = 1;
            }
            if (radMale.Checked == false && radFemale.Checked == false)
            {
                groupGender.Focus();
                errorProvider.SetError(groupGender, "Please, select a gender!");
                flag = 1;
            }
            return flag;
        }
        private int validateCode()
        {
            int flag = 0;

            if (txtEmpID.Text == "")
            {
                txtEmpID.Focus();
                errorProvider.SetError(txtEmpID, "Please, enter the employee Id!");
                flag = 1;
            }
            return flag;
        }
        private void btnDepClear_Click(object sender, EventArgs e)
        {
            txtEmpID.Text = "";
            txtFirstName.Text = "";
            txtMiddleName.Text = "";
            txtLastName.Text = "";
            txtAddress.Text = "";
            txtPhone.Text = "";
            gender = "";
        }
        private void btnReg_Click(object sender, EventArgs e)
        {
            if (validateEmployee() == 0)
            {
                db.connect();
                db.getSub(ExposeProperties.ClientID);
                db.getConnection.Close();
                DataTable sub = new DataTable();
                db.getDataAdapter.Fill(sub);
                string status = sub.Rows[0]["Status"].ToString();
                string maintenance = sub.Rows[0]["MaintenanceStatus"].ToString();

                db.connect();
                db.getWorkHourSubMessage(ExposeProperties.ClientID);
                db.getConnection.Close();
                DataTable workHourSubMsg = new DataTable();
                db.getDataAdapter.Fill(workHourSubMsg);
                int open = (int)workHourSubMsg.Rows[0]["OpenHour"];
                int close = (int)workHourSubMsg.Rows[0]["CloseHour"];
                string cloudMessage = workHourSubMsg.Rows[0]["CloudMessage"].ToString();
                string maintenanceMsg = workHourSubMsg.Rows[0]["MaintenanceMessage"].ToString();

                if (maintenance != "Expired")
                {
                    if (status != "Expired")
                    {
                        int hour = int.Parse(new Home().databaseDate().Hour.ToString());
                        int minute = int.Parse(new Home().databaseDate().Minute.ToString());
                        if (hour < open)
                        {
                            MessageBox.Show("Sorry, itsn't open hour yet", "Can't Connect", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            new Login().Show();
                            Hide();
                        }
                        else if (hour >= close && minute >= 1)
                        {
                            MessageBox.Show("Sorry, work hour is over", "Can't Connect", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            new Login().Show();
                            Hide();
                        }
                        else
                        {
                            if (radEditEmployee.Checked == false && radDeleteEmployee.Checked == false)
                            {
                                registerEmployee();
                            }
                            else if (radDeleteEmployee.Checked == true)
                            {
                                if (MessageBox.Show("Are you sure you want to delete the employee?", "Confirm", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                {
                                    deleteEmployee();
                                }
                            }
                            else
                            {
                                updateEmployee();
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show(cloudMessage, "Can't Connect", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        new Login().Show();
                        Hide();
                    }
                }
                else
                {
                    MessageBox.Show(maintenanceMsg, "Can't Connect", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    new Login().Show();
                    Hide();
                }
            }
        }
        private void btnConfirm_Click(object sender, EventArgs e)
        {
            if (validateCode() == 0)
            {
                db.connect();
                db.getSub(ExposeProperties.ClientID);
                db.getConnection.Close();
                DataTable sub = new DataTable();
                db.getDataAdapter.Fill(sub);
                string status = sub.Rows[0]["Status"].ToString();
                string maintenance = sub.Rows[0]["MaintenanceStatus"].ToString();

                db.connect();
                db.getWorkHourSubMessage(ExposeProperties.ClientID);
                db.getConnection.Close();
                DataTable workHourSubMsg = new DataTable();
                db.getDataAdapter.Fill(workHourSubMsg);
                int open = (int)workHourSubMsg.Rows[0]["OpenHour"];
                int close = (int)workHourSubMsg.Rows[0]["CloseHour"];
                string cloudMessage = workHourSubMsg.Rows[0]["CloudMessage"].ToString();
                string maintenanceMsg = workHourSubMsg.Rows[0]["MaintenanceMessage"].ToString();

                if (maintenance != "Expired")
                {
                    if (status != "Expired")
                    {
                        int hour = int.Parse(new Home().databaseDate().Hour.ToString());
                        int minute = int.Parse(new Home().databaseDate().Minute.ToString());
                        if (hour < open)
                        {
                            MessageBox.Show("Sorry, itsn't open hour yet", "Can't Connect", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            new Login().Show();
                            Hide();
                        }
                        else if (hour >= close && minute >= 1)
                        {
                            MessageBox.Show("Sorry, work hour is over", "Can't Connect", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            new Login().Show();
                            Hide();
                        }
                        else
                        {
                            getEmployee();
                        }
                    }
                    else
                    {
                        MessageBox.Show(cloudMessage, "Can't Connect", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        new Login().Show();
                        Hide();
                    }
                }
                else
                {
                    MessageBox.Show(maintenanceMsg, "Can't Connect", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    new Login().Show();
                    Hide();
                }
            }
        }
        private void linkHome_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            new Home().Show();
            Hide();
        }
        private void linkLogout_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Login log = new Login();
            ExposeProperties exp = new ExposeProperties();
            log.logFile(exp.getUser, "Offline");
            new Login().Show();
            Hide();
        }
        private void radEditEmployee_CheckedChanged(object sender, EventArgs e)
        {
            panConfirmPicture.Visible = true;
            EmpTabDetails.Visible = false;
            PhoneTab.Visible = false;
            groupGender.Visible = false;
            btnReg.Visible = false;
            btnDepClear.Visible = false;
            panEmpID.Visible = true;
            btnReg.Text = "Update";
            if (radEditEmployee.Checked == false)
            {
                sSMessage.Visible = false;
                btnReg.Text = "Register";
            }
        }
        private void radDeleteEmployee_CheckedChanged(object sender, EventArgs e)
        {
            lblRequired.Visible = false;
            panConfirmPicture.Visible = false;
            EmpTabDetails.Visible = false;
            PhoneTab.Visible = false;
            groupGender.Visible = false;
            btnReg.Visible = false;
            btnDepClear.Visible = false;
            panEmpID.Visible = true;
            btnReg.Text = "Delete";
            if (radDeleteEmployee.Checked == false)
            {
                panEmpID.Visible = false;
                btnReg.Text = "Register";
            }
        }
        private void radRegister_CheckedChanged(object sender, EventArgs e)
        {
            EmpTabDetails.Visible = true;
            PhoneTab.Visible = true;
            groupGender.Visible = true;
            btnReg.Visible = true;
            btnDepClear.Visible = true;
            sSMessage.Visible = false;
            lblEmpID.Visible = true;
            txtEmployeeID.Visible = true;
            panPassport.Visible = true;
            panEmpID.Visible = false;
            btnReg.Text = "Register";
            btnPassport.Visible = true;
            if (radRegister.Checked == false)
            {
                EmpTabDetails.Visible = false;
                PhoneTab.Visible = false;
                groupGender.Visible = false;
                btnReg.Visible = false;
                btnDepClear.Visible = false;
                sSMessage.Visible = false;
                lblEmpID.Visible = false;
                txtEmployeeID.Visible = false;
                panPassport.Visible = false;
                panEmpID.Visible = true;
                btnPassport.Visible = false;
            }
        }
        private void btnPassport_Click(object sender, EventArgs e)
        {
            open.Title = "Select Customer Passport";
            open.Filter = "JPG Files(*.jpg)|*.jpg|GIF Files(*.gif)|*.gif|All Files(*.*)|*.*";
            if (open.ShowDialog() == DialogResult.OK)
            {
                imgLoc = open.FileName;
                picUploadEmployee.ImageLocation = imgLoc.ToString();
            }
        }
        private void insertPassport()
        {
            employeeID = txtEmployeeID.Text;
            byte[] img;
            try
            {
                if (picUploadEmployee.Image == null)
                {
                    imgLoc = "C:\\HP PC\\Pictures\\Softlight Logo.png";
                    FileStream file = new FileStream(imgLoc, FileMode.Open, FileAccess.Read);
                    BinaryReader reader = new BinaryReader(file);
                    img = reader.ReadBytes((int)file.Length);
                    db.connect();
                    db.insertEmpPhoto(employeeID, img);
                    db.getConnection.Close();
                    DataTable tb = new DataTable();
                    db.getDataAdapter.Fill(tb);
                }
                else
                {
                    imgLoc = open.FileName;
                    picUploadEmployee.ImageLocation = imgLoc.ToString();
                    FileStream file = new FileStream(imgLoc, FileMode.Open, FileAccess.Read);
                    BinaryReader reader = new BinaryReader(file);
                    img = reader.ReadBytes((int)file.Length);
                    db.connect();
                    db.insertEmpPhoto(employeeID, img);
                    db.getConnection.Close();
                    DataTable tb2 = new DataTable();
                    db.getDataAdapter.Fill(tb2);
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message);
            }
        }
        private void updatePhoto(string empID)
        {
            try
            {
                byte[] img;

                db.connect();
                db.getEmpPhoto(empID);
                db.getConnection.Close();
                tb = new DataTable();
                db.getDataAdapter.Fill(tb);
                string dbEmpID = tb.Rows[0]["EmployeeID"].ToString();

                if (empID == dbEmpID)
                {
                    if (picUploadEmployee.Image == null)
                    {
                        imgLoc = "C:\\HP PC\\Pictures\\Softlight Logo.png";
                        FileStream file = new FileStream(imgLoc, FileMode.Open, FileAccess.Read);
                        BinaryReader reader = new BinaryReader(file);
                        img = reader.ReadBytes((int)file.Length);
                        db.connect();
                        db.updateEmpPhoto(employeeID, img);
                        db.getConnection.Close();
                        DataTable tb2 = new DataTable();
                        db.getDataAdapter.Fill(tb2);
                    }
                    else
                    {
                        FileStream file = new FileStream(imgLoc, FileMode.Open, FileAccess.Read);
                        BinaryReader reader = new BinaryReader(file);
                        img = reader.ReadBytes((int)file.Length);
                        db.connect();
                        db.updateEmpPhoto(employeeID, img);
                        db.getConnection.Close();
                        DataTable tb3 = new DataTable();
                        db.getDataAdapter.Fill(tb3);
                    }
                }
            }
            catch (IndexOutOfRangeException idx)
            {
                insertPassport();
            }
            catch (ArgumentException ae)
            {

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void retrievePhoto(string empID)
        {
            try
            {
                db.connect();
                db.getEmpPhoto(empID);
                db.getConnection.Close();
                tb = new DataTable();
                db.getDataAdapter.Fill(tb);
                byte[] img = (byte[])tb.Rows[0]["Photo"];
                MemoryStream memory = new MemoryStream(img);
                picUploadEmployee.Image = Image.FromStream(memory);
            }
            catch (ArgumentException ae)
            {
                //MessageBox.Show(ae.Message);
            }
            catch (IndexOutOfRangeException idx)
            {
                picUploadEmployee.Image = null;
            }

        }
        private void getEmpName()
        {
            db.connect();
            db.getEmpName();
            db.getConnection.Close();
            tb = new DataTable();
            db.getDataAdapter.Fill(tb);
            foreach (DataRow dr in tb.Rows)
            {
                comboEmployee.Items.Add(dr["FirstName"].ToString());
            }
        }
        private void getEmpIDPhoto()
        {
            try
            {
                db.connect();
                db.getEmpIDPhoto(comboEmployee.SelectedItem.ToString());
                db.getConnection.Close();
                tb = new DataTable();
                db.getDataAdapter.Fill(tb);
                string empID = tb.Rows[0]["EmployeeID"].ToString();
                byte[] img = (byte[])tb.Rows[0]["Photo"];
                MemoryStream memory = new MemoryStream(img);
                picShowEmployee.Image = Image.FromStream(memory);
                lblEmployeeID.Visible = true;
                lblEmployeeID.Text = empID;
            }
            catch (IndexOutOfRangeException idx)
            {
                panConfirmPicture.Visible = false;
                MessageBox.Show("No Picture available for employee", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                lblEmployeeID.Visible = false;
                picShowEmployee.Image = null;
            }
        }
        private void comboEmployee_SelectedIndexChanged(object sender, EventArgs e)
        {
            panConfirmPicture.Visible = true;
            getEmpIDPhoto();
            if (comboEmployee.SelectedItem.ToString() == null)
            {
                comboEmployee.Focus();
                errorProvider.SetError(comboEmployee, "Select employee's name!");
            }
        }

        private void Employee_Load(object sender, EventArgs e)
        {
            getBranchName();
        }
    }
}
